heat_template_version: "2013-05-23"

description: Creates a head node for a MPI cluster

parameters:

  image:
    type: string
    label: Image name or ID
    description: Image to be used for cluster instance
    default: cirros-0.3.3-x86_64
  flavor:
    type: string
    label: Flavor
    description: Type of instance (flavor) to be used
    default: m1.small
  key:
    type: string
    label: Key name
    description: Name of key-pair to be used for compute instance
    default: my_key
  private_network:
    type: string
    label: Private network name or ID
    description: Network to attach instance to.
    default: private-net
  cluster_size:
    type: string
    label: Size of the cluster
    description: Size of the cluster to be created.
    default: 1

resources:
  wait_handle:
    type: OS::Heat::WaitConditionHandle

  wait_condition:
    type: OS::Heat::WaitCondition
    properties:
      handle: { get_resource: wait_handle }
      count: 1
      timeout: 600

  security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      name: cluster_security_group
      rules:
        - protocol: tcp
          port_range_min: 0
          port_range_max: 60000

  port:
    type: OS::Neutron::Port
    properties:
      network: { get_param: private_network }
      security_groups:
        - { get_resource: security_group }

  head_node_instance:
    type: OS::Nova::Server
    properties:
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key }
      networks:
        - port: { get_resource: port }
      user_data_format: RAW
      user_data:
         str_replace:
            params:
               __cluster_size__: { get_param: cluster_size }
               wc_notify: { get_attr: ['wait_handle', 'curl_cli'] }
            template: |
               #!/bin/bash -ex
               # notify heat that we are done here
               wc_notify --data-binary '{"status": "SUCCESS"}'

outputs:
  head_node_instance_ip:
    description: IP address of the instance
    value: { get_attr: [head_node_instance, first_address] }

  head_node_instance_name:
    description: Name of the instance
    value: { get_attr: [head_node_instance, name] }

  head_node_instance_port:
    description: The network port of the head node instance.
    value: { get_resource: port }
